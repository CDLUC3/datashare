/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2001 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" and
 *    "Apache Lucene" must not be used to endorse or promote products
 *    derived from this software without prior written permission. For
 *    written permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    "Apache Lucene", nor may "Apache" appear in their name, without
 *    prior written permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

options {
  STATIC = false;
  UNICODE_INPUT = true;
  USER_CHAR_STREAM = true;
}
PARSER_BEGIN(XTFTokenizer)

package org.cdlib.xtf.textIndexer.tokenizer;

/** A grammar-based tokenizer constructed with JavaCC.
 *
 * <p> This should be a good tokenizer for most European-language documents.
 *
 * <p>Many applications have specific tokenizer needs.  If this tokenizer does
 * not suit your application, please consider copying this source code
 * directory to your project and maintaining your own grammar-based tokenizer.
 */
public class XTFTokenizer extends org.apache.lucene.analysis.Tokenizer {

  /** Constructs a tokenizer for this Reader. */
  public XTFTokenizer(java.io.Reader reader) {
    this(new FastCharStream(reader));
    this.input = reader;
  }
}

PARSER_END(XTFTokenizer)

TOKEN : {					  // token patterns

  // basic word: a sequence of digits & letters
  <BASIC: <OPT_START> (<LETTER>|<DIGIT>)+ <OPT_END> >

  // internal apostrophes: O'Reilly, you're, O'Reilly's
  // use a post-filter to remove possesives
| <APOSTROPHE: <OPT_START> <ALPHA> ("'" <ALPHA>)+ <OPT_END> >

  // acronyms: U.S.A., I.B.M., etc.
  // use a post-filter to remove dots
| <ACRONYM: <OPT_START> <ALPHA> "." (<ALPHA> ".")+ <OPT_END> >

  // company names like AT&T and Excite@Home.
| <COMPANY: <OPT_START> <ALPHA> ("&"|"@") <ALPHA> <OPT_END> >

  // email addresses
| <EMAIL: <OPT_START> <ALPHANUM> (("."|"-"|"_") <ALPHANUM>)* "@" <ALPHANUM> (("."|"-") <ALPHANUM>)+ <OPT_END> >

  // hostname
| <HOST: <OPT_START> <ALPHANUM> ("." <ALPHANUM>)+ <OPT_END> >

  // floating point, serial, model numbers, ip addresses, etc.
  // every other segment must have at least one digit
| <NUM: (<OPT_START> <ALPHANUM> <P> <HAS_DIGIT> <OPT_END> 
       | <OPT_START> <HAS_DIGIT> <P> <ALPHANUM> <OPT_END> 
       | <OPT_START> <ALPHANUM> (<P> <HAS_DIGIT> <P> <ALPHANUM>)+ <OPT_END> 
       | <OPT_START> <HAS_DIGIT> (<P> <ALPHANUM> <P> <HAS_DIGIT>)+ <OPT_END> 
       | <OPT_START> <ALPHANUM> <P> <HAS_DIGIT> (<P> <ALPHANUM> <P> <HAS_DIGIT>)+ <OPT_END>
       | <OPT_START> <HAS_DIGIT> <P> <ALPHANUM> (<P> <HAS_DIGIT> <P> <ALPHANUM>)+ <OPT_END>
       )
  >

| <SYMBOL: <OPT_START> 
     [
      // Monetary symbols
      "\u0024", // Dollar
      "\u00a2", // Cent
      "\u00a3", // Pound Sterling
      "\u00a4", // currency symbol
      "\u00a5", // Yen
      "\u0192", // Florin currency symbol (Dutch)
      "\u20a3", // Franc
      "\u20a4", // Lira
      "\u20a7", // Peseta
      "\u20ac", // Euro
      
      // Fractions
      "\u00bc", // one quarter
      "\u00bd", // one half
      "\u00be", // three quarters
      "\u2153", // one third
      "\u2154", // two thirds
      "\u2155", // one fifth
      "\u2156", // two fifths
      "\u2157", // three fifths
      "\u2158", // four fifths
      "\u2159", // one sixth
      "\u215a", // five sixths
      "\u215b", // one eighth
      "\u215c", // three eighths
      "\u215d", // five eighths
      "\u215e", // seven eighths
      
      // Math symbols
      "\u002b", // plus
      "\u2212", // minus
      "\u003d", // equals
      "\u2260", // not equal
      "\u003c", // less than
      "\u003e", // greater than
      "\u2264", // less than or equal
      "\u2265", // greater than or equal
      "\u00b1", // plus/minus
      "\u00d7", // multiply
      "\u00f7", // divide
      "\u2219", // period-centered bullet operator
      "\u00b7", // mid-dot (same as period-centered bullet operator)
      "\u007e", // tilde
      "\u005e", // circumflex
      "\u00b0", // degree
      "\u00ac", // logical not
      "\u2248", // approximately equal
      "\u00b5", // micro
      "\u221e", // infinity
      "\u2202", // partial differential
      "\u220f", // product
      "\u03c0", // lower-case greek pi
      "\u222b", // integral
      "\u2126", // ohm
      "\u221a", // radical
      "\u2206", // increment
      "\u2211", // summation
      "\u25ca", // lozenge
      "\u212e", // estimate
      "\u2032", // single prime
      "\u2033", // double prime
      "\u2116", // numero
      
      // Other
      "\u00a7", // section sign
      "\u00ae", // registered trademark
      "\u00a9", // copyright
      "\u2122"  // trademark
     ] <OPT_END>
  >
    	
| <#ALPHANUM: (<LETTER>|<DIGIT>)+ >

| <#P: ("_"|"/"|"."|",") >
| <#HAS_DIGIT:					  // at least one digit
    (<LETTER>|<DIGIT>)*
    <DIGIT>
    (<LETTER>|<DIGIT>)*
  >
  
| < #ALPHA: (<LETTER>)+>
| < #LETTER:					  // unicode letters
      [
       "\u0041"-"\u005a",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff"
      ]
  >
| < CJK:                                          // non-alphabets
      [
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
| < #DIGIT:					  // unicode digits
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
| < #OPT_START:					  
      (["\uEBEB"])?  // optioanl start-of-field marker
  >
| < #OPT_END:           
      (["\uEE1D"])?   // optional end-of-field marker
  >
}

SKIP : {					  // skip unrecognized chars
 <NOISE: ~[] >
}

/** Returns the next token in the stream, or null at EOS.
 * <p>The returned token's type is set to an element of {@link
 * StandardTokenizerConstants#tokenImage}.
 */
org.apache.lucene.analysis.Token next() throws java.io.IOException :
{
  Token token = null;
}
{
  ( token = <BASIC> |
    token = <APOSTROPHE> |
    token = <ACRONYM> |
    token = <COMPANY> |
    token = <EMAIL> |
    token = <HOST> |
    token = <NUM> |
    token = <SYMBOL> |
    token = <CJK> |
    token = <EOF>
   )
    {
      if (token.kind == EOF) {
	return null;
      } else {
	return
	  new org.apache.lucene.analysis.Token(token.image,
					token.beginColumn,token.endColumn,
					tokenImage[token.kind]);
      }
    }
}
